// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	task "ipr-savelichev/internal/models/task"
)

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: _a0, _a1
func (_m *Task) AddTask(_a0 context.Context, _a1 *task.Task) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTask provides a mock function with given fields: _a0, _a1
func (_m *Task) EditTask(_a0 context.Context, _a1 *task.Task) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTask provides a mock function with given fields: _a0
func (_m *Task) GetAllTask(_a0 context.Context) ([]task.EmployeTask, error) {
	ret := _m.Called(_a0)

	var r0 []task.EmployeTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]task.EmployeTask, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []task.EmployeTask); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.EmployeTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *Task) GetTask(_a0 context.Context, _a1 uint) (task.EmployeTask, error) {
	ret := _m.Called(_a0, _a1)

	var r0 task.EmployeTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (task.EmployeTask, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) task.EmployeTask); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(task.EmployeTask)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTask provides a mock function with given fields: _a0, _a1
func (_m *Task) RemoveTask(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTask creates a new instance of Task. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Task {
	mock := &Task{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
