// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	employe "ipr-savelichev/internal/models/employe"

	mock "github.com/stretchr/testify/mock"

	task "ipr-savelichev/internal/models/task"
)

// Employe is an autogenerated mock type for the Employe type
type Employe struct {
	mock.Mock
}

// AddEmploye provides a mock function with given fields: _a0, _a1
func (_m *Employe) AddEmploye(_a0 context.Context, _a1 *employe.Employe) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *employe.Employe) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditEmploye provides a mock function with given fields: _a0, _a1
func (_m *Employe) EditEmploye(_a0 context.Context, _a1 *employe.Employe) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *employe.Employe) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEmployes provides a mock function with given fields: _a0
func (_m *Employe) GetAllEmployes(_a0 context.Context) ([]employe.Employe, error) {
	ret := _m.Called(_a0)

	var r0 []employe.Employe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]employe.Employe, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []employe.Employe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employe.Employe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskEmploye provides a mock function with given fields: _a0, _a1
func (_m *Employe) GetTaskEmploye(_a0 context.Context, _a1 uint) (task.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (task.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) task.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveEmploye provides a mock function with given fields: _a0, _a1
func (_m *Employe) RemoveEmploye(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmploye creates a new instance of Employe. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmploye(t interface {
	mock.TestingT
	Cleanup(func())
}) *Employe {
	mock := &Employe{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
