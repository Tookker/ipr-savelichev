// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tool "ipr-savelichev/internal/models/tool"
)

// Tool is an autogenerated mock type for the Tool type
type Tool struct {
	mock.Mock
}

// AddTool provides a mock function with given fields: _a0, _a1
func (_m *Tool) AddTool(_a0 context.Context, _a1 *tool.Tool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tool.Tool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTool provides a mock function with given fields: _a0, _a1
func (_m *Tool) EditTool(_a0 context.Context, _a1 *tool.Tool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tool.Tool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTools provides a mock function with given fields: _a0
func (_m *Tool) GetAllTools(_a0 context.Context) ([]tool.Tool, error) {
	ret := _m.Called(_a0)

	var r0 []tool.Tool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]tool.Tool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []tool.Tool); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tool.Tool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTool provides a mock function with given fields: _a0, _a1
func (_m *Tool) RemoveTool(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTool creates a new instance of Tool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tool {
	mock := &Tool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
